
template <typename T>
pair<bool, int> solve(TreeNode<T>* root) {

    if (root == NULL) {
        pair<bool, int> p = make_pair(true, 0);
        return p;
    }

    if (root->left == NULL && root->right == NULL) {
        pair<bool, int> p = make_pair(true, root->val);
        return p;
    }

    pair<bool, int> left = solve(root->left);
    pair<bool, int> right = solve(root->right);

    int leftAns = left.second;
    int rightAns = right.second;

    bool sumCheck = root->val == leftAns + rightAns;
    bool leftCheck = left.first;
    bool rightCheck = right.first;

    pair<bool, int> ans;
    if (leftCheck && rightCheck && sumCheck) {
        ans.first = true;
        ans.second = root->val + left.second + right.second;
    } else {
        ans.first = false;
    }

    return ans;
}

template <typename T>
bool isSumTree(TreeNode<T>* root) {
    return solve(root).first;
}